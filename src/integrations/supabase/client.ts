
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://hssyqauktqcizwblqhnc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhzc3lxYXVrdHFjaXp3YmxxaG5jIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4MzEzNDEsImV4cCI6MjA1ODQwNzM0MX0.M718sSPqeAhyqJbNnAVTCEnAcZxDTzAaMpHy0VQQAYk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Helper types for the custom tables
export type UserApproval = {
  user_id: string;
  is_approved: boolean;
  created_at: string;
}

export type UserRole = {
  id: string;
  user_id: string;
  role: string;
  created_at: string;
}

// Custom typed functions for user management
export const userManagement = {
  // Get user approval status
  getUserApproval: async (userId: string) => {
    return supabase
      .from('user_approvals')
      .select('*')
      .eq('user_id', userId)
      .single();
  },
  
  // Set user approval status
  setUserApproval: async (userId: string, isApproved: boolean) => {
    return supabase
      .from('user_approvals')
      .upsert({ user_id: userId, is_approved: isApproved })
      .select()
      .single();
  },
  
  // Get user roles
  getUserRoles: async (userId: string) => {
    return supabase
      .from('user_roles')
      .select('*')
      .eq('user_id', userId);
  },
  
  // Add user role
  addUserRole: async (userId: string, role: string) => {
    return supabase
      .from('user_roles')
      .insert({ user_id: userId, role })
      .select();
  },
  
  // Remove user role
  removeUserRole: async (userId: string, role: string) => {
    return supabase
      .from('user_roles')
      .delete()
      .eq('user_id', userId)
      .eq('role', role);
  },
  
  // List all user approvals
  listUserApprovals: async () => {
    return supabase
      .from('user_approvals')
      .select('*');
  },
  
  // List all users with a specific role
  listUsersWithRole: async (role: string) => {
    return supabase
      .from('user_roles')
      .select('*')
      .eq('role', role);
  }
}
